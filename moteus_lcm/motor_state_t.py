"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class motor_state_t(object):
    __slots__ = ["mode", "position", "velocity", "torque", "q_current", "d_current", "abs_position", "rezero_state", "voltage", "temperature", "fault"]

    __typenames__ = ["int16_t", "double", "double", "double", "double", "double", "double", "double", "double", "double", "int8_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.mode = 0
        self.position = 0.0
        self.velocity = 0.0
        self.torque = 0.0
        self.q_current = 0.0
        self.d_current = 0.0
        self.abs_position = 0.0
        self.rezero_state = 0.0
        self.voltage = 0.0
        self.temperature = 0.0
        self.fault = 0

    def encode(self):
        buf = BytesIO()
        buf.write(motor_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hdddddddddb", self.mode, self.position, self.velocity, self.torque, self.q_current, self.d_current, self.abs_position, self.rezero_state, self.voltage, self.temperature, self.fault))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != motor_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return motor_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = motor_state_t()
        self.mode, self.position, self.velocity, self.torque, self.q_current, self.d_current, self.abs_position, self.rezero_state, self.voltage, self.temperature, self.fault = struct.unpack(">hdddddddddb", buf.read(75))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if motor_state_t in parents: return 0
        tmphash = (0xd826a7c34b923b0a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if motor_state_t._packed_fingerprint is None:
            motor_state_t._packed_fingerprint = struct.pack(">Q", motor_state_t._get_hash_recursive([]))
        return motor_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

